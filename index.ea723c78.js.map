{"mappings":"YAGA,SAASA,EAAmBC,EAAKC,GAC/B,IAAMC,EAAS,GAA2BC,OAH1B,2CAGW,iBAA0BA,OAAXH,EAAI,SAAiCG,OAA1BF,EAAI,wBAA8BE,OAJxE,oCAKfC,MAAMF,GACHG,MAAK,SAAAC,G,OAAYA,EAASC,M,IAC1BF,MAAK,SAAAG,GACJ,IAAMC,EAAc,GAA8BN,OAA3BO,KAAKC,MAAMH,EAAKI,KAAKC,MAAM,KAE5CC,EAAeN,EAAKO,QAAQ,GAAGC,YACrCC,QAAQC,IAAIV,EAAKO,QAAQ,GAAGC,aAC5B,IAuCIG,EAlCEH,EALiBF,EACpBM,MAAM,KACNC,KAAI,SAAAC,G,OAAQA,EAAKC,OAAO,GAAGC,cAAgBF,EAAKG,MAAM,E,IACtDC,KAAK,KAE2BN,MAAM,KAAKK,MAAM,GAAGC,KAAK,KAEtDC,EAAOnB,EAAKoB,KACZC,EAAW,GAAsB1B,OAAnBK,EAAKI,KAAKiB,SAAS,KACjCC,GAA0C,IAAlBtB,EAAKuB,KAAKC,OAAaC,QAAQ,GACvDF,EAAO,GAAwB5B,OAArB2B,EAAqB,SAE/BI,EAAkB,CACtBC,MAAO,CACLC,IAAK,qBACLC,MAAO,yBAETC,KAAM,CACJF,IAAK,sBACLC,MAAO,yBAETE,KAAM,CACJH,IAAK,sBACLC,MAAO,yBAETG,OAAQ,CACNJ,IAAK,wBACLC,MAAO,2BAETI,KAAM,CACJL,IAAK,sBACLC,MAAO,yBAETK,QAAS,CACPN,IAAK,qBACLC,MAAO,yBAMLM,GAAQ,IAAIC,MAAOC,WACnB9B,EAAUP,EAAKO,QAAQ,GAAGH,KAI9BO,EADEe,EAAgBnB,GAEhB4B,GAAS,IAAMA,EAAQ,EACnBT,EAAgBnB,GAASsB,MACzBH,EAAgBnB,GAASqB,IAErBF,EAAgBQ,QAAQN,IAIe,IAA7CU,EAAuBC,SAASC,eACpC,0BAGIC,EAAc,IAAIL,KAClBM,EAAUD,EAAYE,mBAAmB,QAAS,CACtDD,QAAS,UAELE,EAAOH,EAAYI,cACnBC,EAAQL,EAAYE,mBAAmB,QAAS,CACpDG,MAAO,UAEHlB,EAAMa,EAAYE,mBAAmB,QAAS,CAClDf,IAAK,YAGPU,EAAqBS,UAAY,6FAKOpD,OAHEM,EAAY,iHAMXN,OAHHa,EAAY,yiBAQQb,OALjBwB,EAAK,mJAK6BxB,OAAjBgB,EAAQ,WAEpChB,OAF6Ca,EAAY,8CAGzDb,OADA+C,EAAQ,8CACD/C,OAAPiC,EAAI,KAAYjC,OAATmD,EAAM,KAMzBnD,OAN4BiD,EAAK,gNAa/BjD,OAPF0B,EAAS,0PAOF1B,OAAL4B,EAAK,mH,IAM5ByB,OAAM,SAAAC,G,OAASxC,QAAQC,IAAIuC,E,IAsB1BC,UAAUC,YACZD,UAAUC,YAAYC,oBACpB,SAAAC,G,QAAGC,OACD/D,EADmBgE,EAARC,SAAmBD,EAATE,U,IAGvB,WAGElE,EAFmB,YACA,W,IAKvBkB,QAAQC,IAAI,gD","sources":["src/js/weather.js"],"sourcesContent":["const API_KEY = `6e3e286b7ba6b78d37123d7ccd0b674f`;\nconst BASE_URL = `https://api.openweathermap.org/data/2.5/`;\n\nfunction getWeatherByCoords(lat, lon) {\n  const apiUrl = `${BASE_URL}/weather?lat=${lat}&lon=${lon}&units=metric&appid=${API_KEY}`;\n  fetch(apiUrl)\n    .then(response => response.json())\n    .then(data => {\n      const temperature = `${Math.floor(data.main.temp)}°`;\n\n      const weatherDescr = data.weather[0].description;\n      console.log(data.weather[0].description);\n      const newDescription = weatherDescr\n        .split(' ')\n        .map(word => word.charAt(0).toUpperCase() + word.slice(1))\n        .join(' ');\n\n      const description = newDescription.split(' ').slice(1).join(' ');\n\n      const city = data.name;\n      const humidity = `${data.main.humidity}%`;\n      const windSpeedInKmPerHour = (data.wind.speed * 3.6).toFixed(0);\n      const wind = `${windSpeedInKmPerHour} km/h`;\n\n      const imagesByWeather = {\n        Clear: {\n          day: 'images/day_sun.png',\n          night: 'images/night_moon.png',\n        },\n        Rain: {\n          day: 'images/day_rain.png',\n          night: 'images/night_rain.png',\n        },\n        Snow: {\n          day: 'images/day_snow.png',\n          night: 'images/night_snow.png',\n        },\n        Clouds: {\n          day: 'images/day_clouds.png',\n          night: 'images/night_clouds.png',\n        },\n        Haze: {\n          day: 'images/day_haze.png',\n          night: 'images/night_haze.png',\n        },\n        default: {\n          day: 'images/day_404.png',\n          night: 'images/night_404.png',\n        },\n      };\n\n      let iconUrl;\n\n      const hours = new Date().getHours();\n      const weather = data.weather[0].main;\n\n      // выбираем изображение в зависимости от погоды и времени суток\n      if (imagesByWeather[weather]) {\n        iconUrl =\n          hours >= 20 || hours < 6\n            ? imagesByWeather[weather].night\n            : imagesByWeather[weather].day;\n      } else {\n        iconUrl = imagesByWeather.default.day;\n      }\n\n      // Обновляем содержимое страницы с помощью полученных данных\n      const weatherCardContainer = document.getElementById(\n        'weather-card-container'\n      );\n\n      const currentDate = new Date();\n      const weekday = currentDate.toLocaleDateString('en-US', {\n        weekday: 'short',\n      });\n      const year = currentDate.getFullYear();\n      const month = currentDate.toLocaleDateString('en-US', {\n        month: 'short',\n      });\n      const day = currentDate.toLocaleDateString('en-US', {\n        day: 'numeric',\n      });\n\n      weatherCardContainer.innerHTML = `\n          <div class=\"weather__header \">\n              <i class=\"weather__temperature\">${temperature}</i>\n       \n              <div class=\"weather__description\">\n                  <span class=\"description\">${description}</span>\n                  <div class=\"weather__location\">                             \n                      <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"32\" height=\"32\" viewBox=\"0 0 32 32\"><path fill=\"currentColor\" d=\"M16 2A11.013 11.013 0 0 0 5 13a10.889 10.889 0 0 0 2.216 6.6s.3.395.349.452L16 30l8.439-9.953c.044-.053.345-.447.345-.447l.001-.003A10.885 10.885 0 0 0 27 13A11.013 11.013 0 0 0 16 2Zm0 15a4 4 0 1 1 4-4a4.005 4.005 0 0 1-4 4Z\"/><circle cx=\"16\" cy=\"13\" r=\"4\" fill=\"none\"/></svg>\n                      <p class=\"weather__city\">${city}</p>\n                  </div>  \n              </div>  \n          </div> \n\n            <img class=\"weather__img slide-in-blurred-top\" src=\"${iconUrl}\" alt=\"${description}\">\n\n            <p class=\"current-date\">${weekday}</p>\n            <p class=\"current-date\">${day} ${month} ${year}</p>\n            \n          <div class=\"weather-details\">\n            <div class=\"humidity\">\n              <i class=\"fa-solid fa-water\"></i>\n              <div class=\"text\">\n                  <span>${humidity}</span>\n                  <p>Humidity</p>\n              </div>\n            </div>                \n            <div class=\"wind\">\n                <i class=\"fa-solid fa-wind\"></i>\n                <div class=\"text\">\n                    <span>${wind}</span>\n                    <p>Wind Speed</p>\n                </div>\n            </div>    \n          </div>`;\n    })\n    .catch(error => console.log(error));\n}\n\nfunction getLocation() {\n  if (navigator.geolocation) {\n    navigator.geolocation.getCurrentPosition(\n      position => {\n        const { latitude, longitude } = position.coords;\n        getWeatherByCoords(latitude, longitude);\n      },\n      () => {\n        // если пользователь не дал разрешение на геолокацию, показываем погоду для New York\n        const defaultLat = 40.7067188;\n        const defaultLon = -74.0671347;\n        getWeatherByCoords(defaultLat, defaultLon);\n      }\n    );\n  } else {\n    console.log('Geolocation is not supported by this browser.');\n  }\n}\nfunction getLocation() {\n  if (navigator.geolocation) {\n    navigator.geolocation.getCurrentPosition(\n      ({ coords: { latitude, longitude } }) => {\n        getWeatherByCoords(latitude, longitude);\n      },\n      () => {\n        const defaultLat = 40.7067188;\n        const defaultLon = -74.0671347;\n        getWeatherByCoords(defaultLat, defaultLon);\n      }\n    );\n  } else {\n    console.log('Geolocation is not supported by this browser.');\n  }\n}\n\ngetLocation();\n"],"names":["$b7c37e8f14632f7d$var$getWeatherByCoords","lat","lon","apiUrl","concat","fetch","then","response","json","data","temperature","Math","floor","main","temp","weatherDescr","weather","description","console","log","iconUrl","split","map","word","charAt","toUpperCase","slice","join","city","name","humidity","windSpeedInKmPerHour","wind","speed","toFixed","imagesByWeather","Clear","day","night","Rain","Snow","Clouds","Haze","default","hours","Date","getHours","weatherCardContainer","document","getElementById","currentDate","weekday","toLocaleDateString","year","getFullYear","month","innerHTML","catch","error","navigator","geolocation","getCurrentPosition","param","coords","_coords","latitude","longitude"],"version":3,"file":"index.ea723c78.js.map"}